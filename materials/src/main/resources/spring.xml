<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
     	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/util 
	    http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

    <context:component-scan base-package="com.madhouse.platform.premiummad">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
	<task:annotation-driven/>
    <task:executor id="taskExecutor" pool-size="100-10000" queue-capacity="10" />

    <!--proxy-target-class="true"强制使用cglib代理, 如果为false则spring会自动选择 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <context:property-placeholder location="classpath:jdbc.properties,classpath:middleware.properties"
                                  ignore-unresolvable="true" file-encoding="UTF-8"/>

    <bean id="druidStatInterceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druidStatPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.madhouse.platform.premiummad.service.impl.*.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druidStatInterceptor" pointcut-ref="druidStatPointcut"/>
    </aop:config>

    <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="100000"/>
        <property name="logSlowSql" value="true"/>
        <property name="mergeSql" value="true"/>
    </bean>
    
    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          abstract="true">
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
        <property name="proxyFilters">
            <list>
                <ref bean="statFilter"/>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="com.madhouse.platform.premiummad.holder.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="premiummad" value-ref="dataSourcePremiummad"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourcePremiummad"/>
        <property name="lenientFallback" value="false"/><!-- 如获取数据源为空不使用默认数据源，抛异常IllegalStateException -->
    </bean>

    <bean id="dataSourcePremiummad" parent="parentDataSource">
        <property name="url" value="${jdbc.premiummad.url}"/>
        <property name="username" value="${jdbc.premiummad.username}"/>
        <property name="password" value="${jdbc.premiummad.password}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.madhouse.platform.premiummad.dao"/>
    </bean>


    <!-- 事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

	<bean id="threadPool"
        class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="3" />
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="10" />
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="25" />
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="300" />
        <!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃.  -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>
    
    <!-- 使用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 基于XML配置任务调度 -->
    <task:scheduled-tasks>
    	<!-- sohu News -->
        <!-- <task:scheduled ref="sohuNewsCustomerCreateApiTask" method="create" cron="${cron.sohuNewsCustomerCreateApiTask}"/>
    	<task:scheduled ref="sohuNewsCustomerListApiTask" method="list" cron="${cron.sohuNewsCustomerListApiTask}"/>
        <task:scheduled ref="sohuNewsUploadMaterialApiTask" method="uploadSohuMaterial" cron="${cron.sohuNewsUploadMaterialApiTask}"/>
        <task:scheduled ref="sohuNewsStatusApiTask" method="getStatusDetail" cron="${cron.sohuNewsStatusApiTask}"/> -->
		
		<!-- sohu TV 
        <task:scheduled ref="sohuTvCustomerCreateApiTask" method="create" cron="${cron.sohuTvCustomerCreateApiTask}"/>
        <task:scheduled ref="sohuTvCustomerListApiTask" method="list" cron="${cron.sohuTvCustomerListApiTask}"/>
        <task:scheduled ref="sohutvStatusApiTask" method="getStatusDetail" cron="${cron.sohutvStatusApiTask}"/>
        <task:scheduled ref="sohutvUploadMaterialApiTask" method="uploadSohuMaterial" cron="${cron.sohutvUploadMaterialApiTask}"/>-->
		
		<!-- Dianping 产品确认不再投此家
 		<task:scheduled ref="dianpingMaterialUploadApiTask" method="uploadMaterial" cron="${cron.dianpingMaterialUploadApiTask}"/>
        <task:scheduled ref="dianpingGetStatusApiTask" method="getStatusResponse" cron="${cron.dianpingGetStatusApiTask}"/>-->
        
        <!-- moji  媒体线下审核
        <task:scheduled ref="mojiMaterialUploadApiTask" method="uploadMaterial" cron="${cron.mojiMaterialUploadApiTask}"/>
        <task:scheduled ref="mojiMaterialStatusApiTask" method="getStatusResponse" cron="${cron.mojiMaterialStatusApiTask}"/>-->
        
        <!-- iqiyi SSP 流量还未接入
        <task:scheduled ref="iQiyiCustomerCreateOrUpdateApiTask" method="createOrUpadate" cron="${cron.iqiyiCustomerCreateApiTask}"/>
        <task:scheduled ref="iQiyiCustomerStatusApiTask" method="batchStatus" cron="${cron.iqiyiCustomerListApiTask}"/>
        <task:scheduled ref="iQiyiMaterialStatusApiTask" method="getStatusDetail" cron="${cron.iqiyiMaterialStatusApiTask}"/>
        <task:scheduled ref="iQiyiMaterialUploadApiTask" method="uploadMaterial" cron="${cron.iqiyiMaterialUploadApiTask}"/> -->
        
        <!-- toutiao 测试地址是正式环境 -->
        <task:scheduled ref="toutiaoMaterialUploadApiTask" method="uploadMaterial" cron="${cron.toutiaoMaterialUploadApiTask}"/>
        <task:scheduled ref="toutiaoMaterialStatusApiTask" method="getStatusDetail" cron="${cron.toutiaoMaterialStatusApiTask}"/>
        
        <!-- Momo -->
        <task:scheduled ref="momoMaterialUploadApiTask" method="uploadMaterial" cron="${cron.momoMaterialUploadApiTask}"/>
        <task:scheduled ref="momoGetStatusApiTask" method="getStatusResponse" cron="${cron.momoMaterialStatusApiTask}"/>
        
        <!-- Letv -->
        <task:scheduled ref="letvUploadMaterialApiTask" method="uploadMaterial" cron="${cron.letvUploadMaterialApiTask}"/>
        <task:scheduled ref="letvStatusApiTask" method="getStatusDetail" cron="${cron.letvStatusApiTask}"/>
	
		<!-- TENCENT -->
        <task:scheduled ref="advertBatchStatusApiTask" method="advertBatchStatus" cron="${cron.advertBatchStatusApiTask}"/>
        <task:scheduled ref="advertUploadApiTask" method="advertUpload" cron="${cron.advertUploadApiTask}"/>
		
		<!-- valuemaker -->
        <task:scheduled ref="valueMakerUploadApiTask" method="uploadValueMakerMaterial" cron="${cron.valuemakerMaterialUploadApiTask}"/> 
        <task:scheduled ref="valueMakerStatusApiTask" method="getValueMakerMaterialStatus" cron="${cron.valuemakerMaterialStatusApiTask}"/>
	
		<!-- funsion 产品确认接的是MadMax， 和 PremiumMad 没关系
        <task:scheduled ref="funadxMaterialStatusApiTask" method="getStatus" cron="${cron.funadxMaterialStatusApiTask}"/>
        <task:scheduled ref="funadxUploadMaterialApiTask" method="uploadMaterial" cron="${cron.funadxUploadMaterialApiTask}"/>-->
	</task:scheduled-tasks>
</beans>